import { app, BrowserWindow, ipcMain } from 'electron';
import { Patient, DocInfo } from './views/Home';
import getPatientName from './fetchdata/getPatientName';
import getDocInfo from './fetchdata/getDocInfo';
import {PythonShell} from 'python-shell';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
let mainWindow:BrowserWindow;
let pyshell = new PythonShell('script.py');

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}





pyshell.end(function (err) {
  if (err){
    throw err;
  };
  console.log('finished');
});

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 500,
    width: 500,
    autoHideMenuBar: true,
    // frame:false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});



ipcMain.on("expand-window", (e,expand:boolean) => {
  console.log('Got message: ', expand);
  if (expand) {
    mainWindow.setSize(500,500)
  } else {
    mainWindow.setSize(150,100)
  }
});




ipcMain.handle("get-name", async (e, FIN) => {
  try {
    console.log('getting patient name')
    const patientName = await getPatientName(FIN)
    console.log('got patient name', patientName)
    return patientName
  } catch (err) {
    const patientName = ''
    return patientName;
  }
})

ipcMain.handle('message', async (e) => {
  const messages = await PythonShell.run('./vision.py',null);
  console.log(messages)
  return messages;
})



ipcMain.handle("get-docInfo", async (e, FIN) => {
  try {
    console.log('getting doc Info')
    const docInfo = await getDocInfo(FIN)
    console.log('got patient name', docInfo)
    return docInfo
  } catch (err) {
    const docInfo:DocInfo[] = [{docType:'Fall Risk', docStatus:'Complete'}]
    return docInfo;
  }
})




app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
